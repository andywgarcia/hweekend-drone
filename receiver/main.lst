
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000706  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000706  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080015c  0080015c  000007f6  2**0
                  ALLOC
  3 .stab         00001ddc  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000120e  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000037e2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00003fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000046c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 35       	cpi	r26, 0x5C	; 92
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e5       	ldi	r26, 0x5C	; 92
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 36       	cpi	r26, 0x6F	; 111
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <main>
  c6:	0c 94 81 03 	jmp	0x702	; 0x702 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <latch>:
*	grabs the newest data from the 
*	nes controller and stores it in the
*	shift register
***************************/
void latch(){
	PORTB |= LATCH;
  ce:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <latch+0x4>
	_delay_us(12);
	PORTB &= ~LATCH;
  d6:	c7 98       	cbi	0x18, 7	; 24
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <latch+0xc>
  de:	08 95       	ret

000000e0 <clk>:
*	for the nes controller. This 
*	tells the nes controller to 
*	send the next bit (button state)
***************************/
void clk(int state){
	if (state){
  e0:	89 2b       	or	r24, r25
  e2:	29 f4       	brne	.+10     	; 0xee <clk+0xe>
		PORTB |= CLK;
	}
	else {
		PORTB &= ~CLK;
  e4:	c6 98       	cbi	0x18, 6	; 24
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <clk+0x8>
  ec:	08 95       	ret
*	tells the nes controller to 
*	send the next bit (button state)
***************************/
void clk(int state){
	if (state){
		PORTB |= CLK;
  ee:	c6 9a       	sbi	0x18, 6	; 24
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <clk+0x12>
  f6:	08 95       	ret

000000f8 <read_data>:
*	grabs the newest data from the 
*	nes controller and stores it in the
*	shift register
***************************/
void latch(){
	PORTB |= LATCH;
  f8:	c7 9a       	sbi	0x18, 7	; 24
  fa:	40 e4       	ldi	r20, 0x40	; 64
  fc:	4a 95       	dec	r20
  fe:	f1 f7       	brne	.-4      	; 0xfc <read_data+0x4>
	_delay_us(12);
	PORTB &= ~LATCH;
 100:	c7 98       	cbi	0x18, 7	; 24
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <read_data+0xc>
 108:	ee e5       	ldi	r30, 0x5E	; 94
 10a:	f1 e0       	ldi	r31, 0x01	; 1
*	and store it in nes_data
***************************/
void read_data(){
	int i;
	latch();
	for (i = 0; i < 16; ++i){
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
		if (i <= 11){
			if (~PINF & DATA){
				nes_data[i] = ON;
			}
			else {
				nes_data[i] = OFF;
 110:	30 e3       	ldi	r19, 0x30	; 48
	latch();
	for (i = 0; i < 16; ++i){
		clk(LOW);
		if (i <= 11){
			if (~PINF & DATA){
				nes_data[i] = ON;
 112:	21 e3       	ldi	r18, 0x31	; 49
 114:	0a c0       	rjmp	.+20     	; 0x12a <read_data+0x32>
 116:	20 83       	st	Z, r18
*	tells the nes controller to 
*	send the next bit (button state)
***************************/
void clk(int state){
	if (state){
		PORTB |= CLK;
 118:	c6 9a       	sbi	0x18, 6	; 24
 11a:	40 e2       	ldi	r20, 0x20	; 32
 11c:	4a 95       	dec	r20
 11e:	f1 f7       	brne	.-4      	; 0x11c <read_data+0x24>
*	and store it in nes_data
***************************/
void read_data(){
	int i;
	latch();
	for (i = 0; i < 16; ++i){
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	31 96       	adiw	r30, 0x01	; 1
 124:	80 31       	cpi	r24, 0x10	; 16
 126:	91 05       	cpc	r25, r1
 128:	59 f0       	breq	.+22     	; 0x140 <read_data+0x48>
void clk(int state){
	if (state){
		PORTB |= CLK;
	}
	else {
		PORTB &= ~CLK;
 12a:	c6 98       	cbi	0x18, 6	; 24
 12c:	40 e2       	ldi	r20, 0x20	; 32
 12e:	4a 95       	dec	r20
 130:	f1 f7       	brne	.-4      	; 0x12e <read_data+0x36>
void read_data(){
	int i;
	latch();
	for (i = 0; i < 16; ++i){
		clk(LOW);
		if (i <= 11){
 132:	8c 30       	cpi	r24, 0x0C	; 12
 134:	91 05       	cpc	r25, r1
 136:	84 f7       	brge	.-32     	; 0x118 <read_data+0x20>
			if (~PINF & DATA){
 138:	00 9b       	sbis	0x00, 0	; 0
 13a:	ed cf       	rjmp	.-38     	; 0x116 <read_data+0x1e>
				nes_data[i] = ON;
			}
			else {
				nes_data[i] = OFF;
 13c:	30 83       	st	Z, r19
 13e:	ec cf       	rjmp	.-40     	; 0x118 <read_data+0x20>
			}
		}
		clk(HIGH);
	}

}
 140:	08 95       	ret

00000142 <USART_Init>:
/**************************
*	Initializes uart1 with the given ubrr
***************************/
void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 142:	90 93 98 00 	sts	0x0098, r25
    UBRR1L = (unsigned char)ubrr;
 146:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	80 93 9d 00 	sts	0x009D, r24
 156:	08 95       	ret

00000158 <USART_Transmit>:
/**************************
*	Transmits the given byte over uart1
***************************/
void USART_Transmit( unsigned char data ) {
    /* Wait for empty transmit buffer */ 
    while ( !( UCSR1A & (1<<UDRE1)) );
 158:	90 91 9b 00 	lds	r25, 0x009B
 15c:	95 ff       	sbrs	r25, 5
 15e:	fc cf       	rjmp	.-8      	; 0x158 <USART_Transmit>
    /* Put data into buffer, sends the data */ 
    UDR1 = data;
 160:	80 93 9c 00 	sts	0x009C, r24
 164:	08 95       	ret

00000166 <strobe_lcd>:
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 166:	e2 e6       	ldi	r30, 0x62	; 98
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	80 83       	st	Z, r24
    PORTF &= ~0x08;
 170:	80 81       	ld	r24, Z
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <clear_display>:
}

void clear_display(void){
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 178:	77 9b       	sbis	0x0e, 7	; 14
 17a:	fe cf       	rjmp	.-4      	; 0x178 <clear_display>
    SPDR = 0x00;    //command, not data
 17c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <clear_display+0x6>
    SPDR = 0x01;    //clear display command
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <clear_display+0xe>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 18a:	80 91 62 00 	lds	r24, 0x0062
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	98 e1       	ldi	r25, 0x18	; 24
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <clear_display+0x2a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <clear_display+0x30>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <home_line2>:
    strobe_lcd();   //strobe the LCD enable pin
    _delay_ms(1.6);   //obligatory waiting for slow LCD
}

void home_line2(void){
    SPDR = 0x00;    //command, not data
 1ac:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1ae:	77 9b       	sbis	0x0e, 7	; 14
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <home_line2+0x2>
    SPDR = 0xC0;   // cursor go home on line 2
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <home_line2+0xa>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 1ba:	80 91 62 00 	lds	r24, 0x0062
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 1c4:	80 91 62 00 	lds	r24, 0x0062
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	85 ec       	ldi	r24, 0xC5	; 197
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <home_line2+0x24>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <char2lcd>:

//sends a char to the LCD
void char2lcd(char a_char){
    //sends a char to the LCD
    //usage: char2lcd('H');  // send an H to the LCD
    SPDR = 0x01;   //set SR for data xfer with LSB=1
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	9f b9       	out	0x0f, r25	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1dc:	77 9b       	sbis	0x0e, 7	; 14
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <char2lcd+0x4>
    SPDR = a_char; //send the char to the SPI port
 1e0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 1e2:	77 9b       	sbis	0x0e, 7	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <char2lcd+0xa>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 1e6:	80 91 62 00 	lds	r24, 0x0062
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 1f0:	80 91 62 00 	lds	r24, 0x0062
 1f4:	87 7f       	andi	r24, 0xF7	; 247
 1f6:	80 93 62 00 	sts	0x0062, r24
 1fa:	85 ec       	ldi	r24, 0xC5	; 197
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <char2lcd+0x24>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <string2lcd>:
    strobe_lcd();  //toggle the enable bit
    _delay_us(37);
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	fc 01       	movw	r30, r24
 20a:	dc 01       	movw	r26, r24
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e0       	ldi	r21, 0x00	; 0
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x01; //set SR for data
 210:	61 e0       	ldi	r22, 0x01	; 1

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 212:	77 9b       	sbis	0x0e, 7	; 14
 214:	fe cf       	rjmp	.-4      	; 0x212 <string2lcd+0xe>
        SPDR = 0x01; //set SR for data
 216:	6f b9       	out	0x0f, r22	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 218:	77 9b       	sbis	0x0e, 7	; 14
 21a:	fe cf       	rjmp	.-4      	; 0x218 <string2lcd+0x14>
        SPDR = lcd_str[count]; 
 21c:	8d 91       	ld	r24, X+
 21e:	8f b9       	out	0x0f, r24	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 220:	77 9b       	sbis	0x0e, 7	; 14
 222:	fe cf       	rjmp	.-4      	; 0x220 <string2lcd+0x1c>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 224:	90 91 62 00 	lds	r25, 0x0062
 228:	98 60       	ori	r25, 0x08	; 8
 22a:	90 93 62 00 	sts	0x0062, r25
    PORTF &= ~0x08;
 22e:	90 91 62 00 	lds	r25, 0x0062
 232:	97 7f       	andi	r25, 0xF7	; 247
 234:	90 93 62 00 	sts	0x0062, r25
 238:	85 ec       	ldi	r24, 0xC5	; 197
 23a:	8a 95       	dec	r24
 23c:	f1 f7       	brne	.-4      	; 0x23a <string2lcd+0x36>
 23e:	00 00       	nop
}

//sends a string in FLASH to LCD
void string2lcd(char *lcd_str){
    int count;
    for (count=0; count<=(strlen(lcd_str)-1); count++){
 240:	4f 5f       	subi	r20, 0xFF	; 255
 242:	5f 4f       	sbci	r21, 0xFF	; 255
 244:	ef 01       	movw	r28, r30
 246:	09 90       	ld	r0, Y+
 248:	00 20       	and	r0, r0
 24a:	e9 f7       	brne	.-6      	; 0x246 <string2lcd+0x42>
 24c:	9e 01       	movw	r18, r28
 24e:	2e 1b       	sub	r18, r30
 250:	3f 0b       	sbc	r19, r31
 252:	22 50       	subi	r18, 0x02	; 2
 254:	31 09       	sbc	r19, r1
 256:	24 17       	cp	r18, r20
 258:	35 07       	cpc	r19, r21
 25a:	d8 f6       	brcc	.-74     	; 0x212 <string2lcd+0xe>
        SPDR = lcd_str[count]; 
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);  // Max delay for this function is 48us
    }
}   
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <stepUp>:
/**************************
*	Move the motor up for STEP_TIME milliseconds
*	then pause for a second
***************************/
void stepUp(){
	string2lcd("Step Up");
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION31;
 26a:	1d 9a       	sbi	0x03, 5	; 3
	PORTE &= ~DIRECTION32;
 26c:	1c 98       	cbi	0x03, 4	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	81 ee       	ldi	r24, 0xE1	; 225
 272:	94 e0       	ldi	r25, 0x04	; 4
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <stepUp+0x12>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <stepUp+0x1c>
 27e:	00 00       	nop
	_delay_ms(STEP_TIME);
	PORTE |= DIRECTION32;
 280:	1c 9a       	sbi	0x03, 4	; 3
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	83 ed       	ldi	r24, 0xD3	; 211
 286:	90 e3       	ldi	r25, 0x30	; 48
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <stepUp+0x26>
 290:	00 c0       	rjmp	.+0      	; 0x292 <stepUp+0x30>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <stepDown>:
/**************************
*	Move the motor down for STEP_TIME milliseconds
*	then pause for a second
***************************/
void stepDown(){
	string2lcd("Step Down");
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION32;
 29e:	1c 9a       	sbi	0x03, 4	; 3
	PORTE &= ~DIRECTION31;
 2a0:	1d 98       	cbi	0x03, 5	; 3
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	81 ee       	ldi	r24, 0xE1	; 225
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <stepDown+0x12>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <stepDown+0x1c>
 2b2:	00 00       	nop
	_delay_ms(STEP_TIME);
	PORTE |= DIRECTION31;
 2b4:	1d 9a       	sbi	0x03, 5	; 3
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	83 ed       	ldi	r24, 0xD3	; 211
 2ba:	90 e3       	ldi	r25, 0x30	; 48
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <stepDown+0x26>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <stepDown+0x30>
 2c6:	00 00       	nop
 2c8:	08 95       	ret

000002ca <lookUp>:

/**************************
*	Set the motor to move up 
***************************/
void lookUp(){
	string2lcd("Look Up");
 2ca:	82 e1       	ldi	r24, 0x12	; 18
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION31;
 2d2:	1d 9a       	sbi	0x03, 5	; 3
	PORTE &= ~DIRECTION32;
 2d4:	1c 98       	cbi	0x03, 4	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	80 e2       	ldi	r24, 0x20	; 32
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <lookUp+0xe>
 2dc:	08 95       	ret

000002de <lookDown>:

/**************************
*	Set the motor to move down
***************************/
void lookDown(){
	string2lcd("Look Down");
 2de:	8a e1       	ldi	r24, 0x1A	; 26
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION32;
 2e6:	1c 9a       	sbi	0x03, 4	; 3
	PORTE &= DIRECTION31;
 2e8:	83 b1       	in	r24, 0x03	; 3
 2ea:	80 72       	andi	r24, 0x20	; 32
 2ec:	83 b9       	out	0x03, r24	; 3
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lookDown+0x12>
 2f4:	08 95       	ret

000002f6 <fire>:

/**************************
*	Sets the Fire pin high to release the solenoid	
***************************/
void fire(){
	string2lcd("Firing");
 2f6:	84 e2       	ldi	r24, 0x24	; 36
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	
	PORTB |= FIRE;
 2fe:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	8b e4       	ldi	r24, 0x4B	; 75
 304:	9d e1       	ldi	r25, 0x1D	; 29
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <fire+0x10>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <fire+0x1a>
 310:	00 00       	nop
	_delay_ms(600);
	PORTB &= ~FIRE;
 312:	c5 98       	cbi	0x18, 5	; 24
 314:	08 95       	ret

00000316 <forward>:

/**************************
*	Sets both motors to foward
***************************/
void forward(){
	string2lcd("Forward");
 316:	8b e2       	ldi	r24, 0x2B	; 43
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION11;
 31e:	18 9a       	sbi	0x03, 0	; 3
	PORTE &= ~DIRECTION12;
 320:	19 98       	cbi	0x03, 1	; 3
	PORTE |= DIRECTION21;
 322:	1a 9a       	sbi	0x03, 2	; 3
	PORTE &= ~DIRECTION22;
 324:	1b 98       	cbi	0x03, 3	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	80 e2       	ldi	r24, 0x20	; 32
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <forward+0x12>
 32c:	08 95       	ret

0000032e <reverse>:

/**************************
*	Sets both motors to reverse
***************************/
void reverse(){
	string2lcd("Reverse");
 32e:	83 e3       	ldi	r24, 0x33	; 51
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE &= ~DIRECTION11;
 336:	18 98       	cbi	0x03, 0	; 3
	PORTE |= DIRECTION12;
 338:	19 9a       	sbi	0x03, 1	; 3
	PORTE &= ~DIRECTION21;
 33a:	1a 98       	cbi	0x03, 2	; 3
	PORTE |= DIRECTION22;
 33c:	1b 9a       	sbi	0x03, 3	; 3
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	8a 95       	dec	r24
 342:	f1 f7       	brne	.-4      	; 0x340 <reverse+0x12>
 344:	08 95       	ret

00000346 <left>:
/**************************
*	Sets left motor to forward 
*	right motor to reverse
***************************/
void left(){
	string2lcd("Left");
 346:	8b e3       	ldi	r24, 0x3B	; 59
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION11;
 34e:	18 9a       	sbi	0x03, 0	; 3
	PORTE &= ~DIRECTION12;
 350:	19 98       	cbi	0x03, 1	; 3
	PORTE &= ~DIRECTION21;
 352:	1a 98       	cbi	0x03, 2	; 3
	PORTE |= DIRECTION22;
 354:	1b 9a       	sbi	0x03, 3	; 3
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <left+0x12>
 35c:	08 95       	ret

0000035e <right>:
/**************************
*	Sets right motor to forward
*	left motor to reverse
***************************/
void right(){
	string2lcd("right");
 35e:	80 e4       	ldi	r24, 0x40	; 64
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE &= ~DIRECTION11;
 366:	18 98       	cbi	0x03, 0	; 3
	PORTE |= DIRECTION12;
 368:	19 9a       	sbi	0x03, 1	; 3
	PORTE |= DIRECTION21;
 36a:	1a 9a       	sbi	0x03, 2	; 3
	PORTE &= ~DIRECTION22;
 36c:	1b 98       	cbi	0x03, 3	; 3
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	8a 95       	dec	r24
 372:	f1 f7       	brne	.-4      	; 0x370 <right+0x12>
 374:	08 95       	ret

00000376 <stop>:

/**************************
*	Sets both motors off
***************************/
void stop(){
	string2lcd("Stop");
 376:	86 e4       	ldi	r24, 0x46	; 70
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	PORTE |= DIRECTION11;
 37e:	18 9a       	sbi	0x03, 0	; 3
	PORTE |= DIRECTION12;
 380:	19 9a       	sbi	0x03, 1	; 3
	PORTE |= DIRECTION21;
 382:	1a 9a       	sbi	0x03, 2	; 3
	PORTE |= DIRECTION22;
 384:	1b 9a       	sbi	0x03, 3	; 3
	PORTE |= DIRECTION31;
 386:	1d 9a       	sbi	0x03, 5	; 3
	PORTE |= DIRECTION32;
 388:	1c 9a       	sbi	0x03, 4	; 3
 38a:	80 e2       	ldi	r24, 0x20	; 32
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <stop+0x16>
 390:	08 95       	ret

00000392 <USART_Receive>:

/**************************
*	Wait for data to be received, then
*	return the data from UDR1
***************************/
unsigned char USART_Receive( void ) {
 392:	04 c0       	rjmp	.+8      	; 0x39c <USART_Receive+0xa>
	/* Wait for data to be received */ //
	while ( !(UCSR1A & (1<<RXC)) ){
		clear_display();
 394:	0e 94 bc 00 	call	0x178	; 0x178 <clear_display>
		stop();
 398:	0e 94 bb 01 	call	0x376	; 0x376 <stop>
*	Wait for data to be received, then
*	return the data from UDR1
***************************/
unsigned char USART_Receive( void ) {
	/* Wait for data to be received */ //
	while ( !(UCSR1A & (1<<RXC)) ){
 39c:	80 91 9b 00 	lds	r24, 0x009B
 3a0:	87 ff       	sbrs	r24, 7
 3a2:	f8 cf       	rjmp	.-16     	; 0x394 <USART_Receive+0x2>
		clear_display();
		stop();
	}
	/* Get and return received data from buffer */ 
	
	return UDR1;
 3a4:	80 91 9c 00 	lds	r24, 0x009C
 3a8:	08 95       	ret

000003aa <print_nes>:


/**************************
*	Print the controller data, button by button, to the LCD
***************************/
void print_nes(){
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	61 97       	sbiw	r28, 0x11	; 17
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	fe 01       	movw	r30, r28
 3c0:	31 96       	adiw	r30, 0x01	; 1
 3c2:	9e 01       	movw	r18, r28
 3c4:	2f 5e       	subi	r18, 0xEF	; 239
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
	char buttons[17];
	int i;
	for (i = 0; i < 16; ++i){
		buttons[i] = '-';
 3c8:	8d e2       	ldi	r24, 0x2D	; 45
 3ca:	81 93       	st	Z+, r24
*	Print the controller data, button by button, to the LCD
***************************/
void print_nes(){
	char buttons[17];
	int i;
	for (i = 0; i < 16; ++i){
 3cc:	e2 17       	cp	r30, r18
 3ce:	f3 07       	cpc	r31, r19
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <print_nes+0x20>
		buttons[i] = '-';
	}
	if (nes_data[A] == ON){
 3d2:	80 91 66 01 	lds	r24, 0x0166
 3d6:	81 33       	cpi	r24, 0x31	; 49
 3d8:	09 f4       	brne	.+2      	; 0x3dc <print_nes+0x32>
 3da:	5d c0       	rjmp	.+186    	; 0x496 <print_nes+0xec>
		buttons[A] = 'A';
	}
	if (nes_data[B] == ON){
 3dc:	80 91 5e 01 	lds	r24, 0x015E
 3e0:	81 33       	cpi	r24, 0x31	; 49
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <print_nes+0x3c>
 3e4:	55 c0       	rjmp	.+170    	; 0x490 <print_nes+0xe6>
		buttons[B] = 'B';
	}
	if (nes_data[X] == ON){
 3e6:	80 91 67 01 	lds	r24, 0x0167
 3ea:	81 33       	cpi	r24, 0x31	; 49
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <print_nes+0x46>
 3ee:	4d c0       	rjmp	.+154    	; 0x48a <print_nes+0xe0>
		buttons[X] = 'X';
	}
	if (nes_data[Y] == ON){
 3f0:	80 91 5f 01 	lds	r24, 0x015F
 3f4:	81 33       	cpi	r24, 0x31	; 49
 3f6:	09 f4       	brne	.+2      	; 0x3fa <print_nes+0x50>
 3f8:	45 c0       	rjmp	.+138    	; 0x484 <print_nes+0xda>
		buttons[Y] = 'Y';
	}
	if (nes_data[Start] == ON){
 3fa:	80 91 61 01 	lds	r24, 0x0161
 3fe:	81 33       	cpi	r24, 0x31	; 49
 400:	f1 f1       	breq	.+124    	; 0x47e <print_nes+0xd4>
		buttons[Start] = 'S';
	}
	if (nes_data[Select] == ON){
 402:	80 91 60 01 	lds	r24, 0x0160
 406:	81 33       	cpi	r24, 0x31	; 49
 408:	b9 f1       	breq	.+110    	; 0x478 <print_nes+0xce>
		buttons[Select] = 'L';
	}
	if (nes_data[Up] == ON){
 40a:	80 91 62 01 	lds	r24, 0x0162
 40e:	81 33       	cpi	r24, 0x31	; 49
 410:	81 f1       	breq	.+96     	; 0x472 <print_nes+0xc8>
		buttons[Up] = 'U';
	}
	if (nes_data[Down] == ON){
 412:	80 91 63 01 	lds	r24, 0x0163
 416:	81 33       	cpi	r24, 0x31	; 49
 418:	49 f1       	breq	.+82     	; 0x46c <print_nes+0xc2>
		buttons[Down] = 'D';
	}
	if (nes_data[Left] == ON){
 41a:	80 91 64 01 	lds	r24, 0x0164
 41e:	81 33       	cpi	r24, 0x31	; 49
 420:	11 f1       	breq	.+68     	; 0x466 <print_nes+0xbc>
		buttons[Left] = 'L';
	}
	if (nes_data[Right] == ON){
 422:	80 91 65 01 	lds	r24, 0x0165
 426:	81 33       	cpi	r24, 0x31	; 49
 428:	d9 f0       	breq	.+54     	; 0x460 <print_nes+0xb6>
		buttons[Right] = 'R';
	}
	if (nes_data[L] == ON){
 42a:	80 91 68 01 	lds	r24, 0x0168
 42e:	81 33       	cpi	r24, 0x31	; 49
 430:	a1 f0       	breq	.+40     	; 0x45a <print_nes+0xb0>
		buttons[L] = 'C';
	}
	if (nes_data[R] == ON){
 432:	80 91 69 01 	lds	r24, 0x0169
 436:	81 33       	cpi	r24, 0x31	; 49
 438:	11 f4       	brne	.+4      	; 0x43e <print_nes+0x94>
		buttons[R] = 'F';
 43a:	86 e4       	ldi	r24, 0x46	; 70
 43c:	8c 87       	std	Y+12, r24	; 0x0c
	}
	buttons[16] = '\0';
 43e:	19 8a       	std	Y+17, r1	; 0x11
	string2lcd(buttons);
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
}
 448:	61 96       	adiw	r28, 0x11	; 17
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret
	}
	if (nes_data[Right] == ON){
		buttons[Right] = 'R';
	}
	if (nes_data[L] == ON){
		buttons[L] = 'C';
 45a:	83 e4       	ldi	r24, 0x43	; 67
 45c:	8b 87       	std	Y+11, r24	; 0x0b
 45e:	e9 cf       	rjmp	.-46     	; 0x432 <print_nes+0x88>
	}
	if (nes_data[Left] == ON){
		buttons[Left] = 'L';
	}
	if (nes_data[Right] == ON){
		buttons[Right] = 'R';
 460:	82 e5       	ldi	r24, 0x52	; 82
 462:	88 87       	std	Y+8, r24	; 0x08
 464:	e2 cf       	rjmp	.-60     	; 0x42a <print_nes+0x80>
	}
	if (nes_data[Down] == ON){
		buttons[Down] = 'D';
	}
	if (nes_data[Left] == ON){
		buttons[Left] = 'L';
 466:	8c e4       	ldi	r24, 0x4C	; 76
 468:	8f 83       	std	Y+7, r24	; 0x07
 46a:	db cf       	rjmp	.-74     	; 0x422 <print_nes+0x78>
	}
	if (nes_data[Up] == ON){
		buttons[Up] = 'U';
	}
	if (nes_data[Down] == ON){
		buttons[Down] = 'D';
 46c:	84 e4       	ldi	r24, 0x44	; 68
 46e:	8e 83       	std	Y+6, r24	; 0x06
 470:	d4 cf       	rjmp	.-88     	; 0x41a <print_nes+0x70>
	}
	if (nes_data[Select] == ON){
		buttons[Select] = 'L';
	}
	if (nes_data[Up] == ON){
		buttons[Up] = 'U';
 472:	85 e5       	ldi	r24, 0x55	; 85
 474:	8d 83       	std	Y+5, r24	; 0x05
 476:	cd cf       	rjmp	.-102    	; 0x412 <print_nes+0x68>
	}
	if (nes_data[Start] == ON){
		buttons[Start] = 'S';
	}
	if (nes_data[Select] == ON){
		buttons[Select] = 'L';
 478:	8c e4       	ldi	r24, 0x4C	; 76
 47a:	8b 83       	std	Y+3, r24	; 0x03
 47c:	c6 cf       	rjmp	.-116    	; 0x40a <print_nes+0x60>
	}
	if (nes_data[Y] == ON){
		buttons[Y] = 'Y';
	}
	if (nes_data[Start] == ON){
		buttons[Start] = 'S';
 47e:	83 e5       	ldi	r24, 0x53	; 83
 480:	8c 83       	std	Y+4, r24	; 0x04
 482:	bf cf       	rjmp	.-130    	; 0x402 <print_nes+0x58>
	}
	if (nes_data[X] == ON){
		buttons[X] = 'X';
	}
	if (nes_data[Y] == ON){
		buttons[Y] = 'Y';
 484:	89 e5       	ldi	r24, 0x59	; 89
 486:	8a 83       	std	Y+2, r24	; 0x02
 488:	b8 cf       	rjmp	.-144    	; 0x3fa <print_nes+0x50>
	}
	if (nes_data[B] == ON){
		buttons[B] = 'B';
	}
	if (nes_data[X] == ON){
		buttons[X] = 'X';
 48a:	88 e5       	ldi	r24, 0x58	; 88
 48c:	8a 87       	std	Y+10, r24	; 0x0a
 48e:	b0 cf       	rjmp	.-160    	; 0x3f0 <print_nes+0x46>
	}
	if (nes_data[A] == ON){
		buttons[A] = 'A';
	}
	if (nes_data[B] == ON){
		buttons[B] = 'B';
 490:	82 e4       	ldi	r24, 0x42	; 66
 492:	89 83       	std	Y+1, r24	; 0x01
 494:	a8 cf       	rjmp	.-176    	; 0x3e6 <print_nes+0x3c>
	int i;
	for (i = 0; i < 16; ++i){
		buttons[i] = '-';
	}
	if (nes_data[A] == ON){
		buttons[A] = 'A';
 496:	81 e4       	ldi	r24, 0x41	; 65
 498:	89 87       	std	Y+9, r24	; 0x09
 49a:	a0 cf       	rjmp	.-192    	; 0x3dc <print_nes+0x32>

0000049c <spi_init>:
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 49c:	e1 e6       	ldi	r30, 0x61	; 97
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	88 60       	ori	r24, 0x08	; 8
 4a4:	80 83       	st	Z, r24
    PORTB |= 0x00; //port B initalization for SPI
 4a6:	88 b3       	in	r24, 0x18	; 24
 4a8:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 4aa:	87 b3       	in	r24, 0x17	; 23
 4ac:	87 60       	ori	r24, 0x07	; 7
 4ae:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 4b0:	80 e5       	ldi	r24, 0x50	; 80
 4b2:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	8e b9       	out	0x0e, r24	; 14
 4b8:	08 95       	ret

000004ba <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	8f e5       	ldi	r24, 0x5F	; 95
 4bc:	9a ee       	ldi	r25, 0xEA	; 234
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <lcd_init+0x4>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <lcd_init+0xa>
 4c4:	00 00       	nop
 4c6:	23 e0       	ldi	r18, 0x03	; 3
 4c8:	30 e0       	ldi	r19, 0x00	; 0
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        SPDR = 0x30;
 4ca:	90 e3       	ldi	r25, 0x30	; 48
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
        SPDR = 0x00;
 4cc:	1f b8       	out	0x0f, r1	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4ce:	77 9b       	sbis	0x0e, 7	; 14
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <lcd_init+0x14>
        SPDR = 0x30;
 4d2:	9f b9       	out	0x0f, r25	; 15
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4d4:	77 9b       	sbis	0x0e, 7	; 14
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <lcd_init+0x1a>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 4d8:	80 91 62 00 	lds	r24, 0x0062
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 4e2:	80 91 62 00 	lds	r24, 0x0062
 4e6:	87 7f       	andi	r24, 0xF7	; 247
 4e8:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ec:	85 ec       	ldi	r24, 0xC5	; 197
 4ee:	8a 95       	dec	r24
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_init+0x34>
 4f2:	00 00       	nop
 4f4:	21 50       	subi	r18, 0x01	; 1
 4f6:	31 09       	sbc	r19, r1
//initialize the LCD to receive data
void lcd_init(void){
    int i;
    //initalize the LCD to receive data
    _delay_ms(15);   
    for(i=0; i<=2; i++){ //do funky initalize sequence 3 times
 4f8:	49 f7       	brne	.-46     	; 0x4cc <lcd_init+0x12>
        while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
        strobe_lcd();
        _delay_us(37);
    }

    SPDR = 0x00;
 4fa:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 4fc:	77 9b       	sbis	0x0e, 7	; 14
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <lcd_init+0x42>
    SPDR = 0x38;
 500:	88 e3       	ldi	r24, 0x38	; 56
 502:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 504:	77 9b       	sbis	0x0e, 7	; 14
 506:	fe cf       	rjmp	.-4      	; 0x504 <lcd_init+0x4a>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 508:	80 91 62 00 	lds	r24, 0x0062
 50c:	88 60       	ori	r24, 0x08	; 8
 50e:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 512:	80 91 62 00 	lds	r24, 0x0062
 516:	87 7f       	andi	r24, 0xF7	; 247
 518:	80 93 62 00 	sts	0x0062, r24
 51c:	95 ec       	ldi	r25, 0xC5	; 197
 51e:	9a 95       	dec	r25
 520:	f1 f7       	brne	.-4      	; 0x51e <lcd_init+0x64>
 522:	00 00       	nop
    SPDR = 0x38;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 524:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 526:	77 9b       	sbis	0x0e, 7	; 14
 528:	fe cf       	rjmp	.-4      	; 0x526 <lcd_init+0x6c>
    SPDR = 0x08;
 52a:	88 e0       	ldi	r24, 0x08	; 8
 52c:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 52e:	77 9b       	sbis	0x0e, 7	; 14
 530:	fe cf       	rjmp	.-4      	; 0x52e <lcd_init+0x74>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 532:	80 91 62 00 	lds	r24, 0x0062
 536:	88 60       	ori	r24, 0x08	; 8
 538:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 53c:	80 91 62 00 	lds	r24, 0x0062
 540:	87 7f       	andi	r24, 0xF7	; 247
 542:	80 93 62 00 	sts	0x0062, r24
 546:	85 ec       	ldi	r24, 0xC5	; 197
 548:	8a 95       	dec	r24
 54a:	f1 f7       	brne	.-4      	; 0x548 <lcd_init+0x8e>
 54c:	00 00       	nop
    SPDR = 0x08;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 54e:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 550:	77 9b       	sbis	0x0e, 7	; 14
 552:	fe cf       	rjmp	.-4      	; 0x550 <lcd_init+0x96>
    SPDR = 0x01;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 558:	77 9b       	sbis	0x0e, 7	; 14
 55a:	fe cf       	rjmp	.-4      	; 0x558 <lcd_init+0x9e>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 55c:	80 91 62 00 	lds	r24, 0x0062
 560:	88 60       	ori	r24, 0x08	; 8
 562:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 566:	80 91 62 00 	lds	r24, 0x0062
 56a:	87 7f       	andi	r24, 0xF7	; 247
 56c:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	98 e1       	ldi	r25, 0x18	; 24
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <lcd_init+0xba>
 578:	00 c0       	rjmp	.+0      	; 0x57a <lcd_init+0xc0>
 57a:	00 00       	nop
    SPDR = 0x01;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_ms(1.6);

    SPDR = 0x00;
 57c:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 57e:	77 9b       	sbis	0x0e, 7	; 14
 580:	fe cf       	rjmp	.-4      	; 0x57e <lcd_init+0xc4>
    SPDR = 0x06;
 582:	86 e0       	ldi	r24, 0x06	; 6
 584:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 586:	77 9b       	sbis	0x0e, 7	; 14
 588:	fe cf       	rjmp	.-4      	; 0x586 <lcd_init+0xcc>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 58a:	80 91 62 00 	lds	r24, 0x0062
 58e:	88 60       	ori	r24, 0x08	; 8
 590:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 594:	80 91 62 00 	lds	r24, 0x0062
 598:	87 7f       	andi	r24, 0xF7	; 247
 59a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	95 ec       	ldi	r25, 0xC5	; 197
 5a0:	9a 95       	dec	r25
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <lcd_init+0xe6>
 5a4:	00 00       	nop
    SPDR = 0x06;
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
    strobe_lcd();
    _delay_us(37);

    SPDR = 0x00;
 5a6:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 5a8:	77 9b       	sbis	0x0e, 7	; 14
 5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <lcd_init+0xee>
    SPDR = 0x0E;
 5ac:	8e e0       	ldi	r24, 0x0E	; 14
 5ae:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}   // Wait for SPI transfer to complete
 5b0:	77 9b       	sbis	0x0e, 7	; 14
 5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <lcd_init+0xf6>
	return UDR1;
}

//twiddles bit 3, PORTF creating the enable signal for the LCD
void strobe_lcd(void){
    PORTF |= 0x08;
 5b4:	80 91 62 00 	lds	r24, 0x0062
 5b8:	88 60       	ori	r24, 0x08	; 8
 5ba:	80 93 62 00 	sts	0x0062, r24
    PORTF &= ~0x08;
 5be:	80 91 62 00 	lds	r24, 0x0062
 5c2:	87 7f       	andi	r24, 0xF7	; 247
 5c4:	80 93 62 00 	sts	0x0062, r24
 5c8:	85 ec       	ldi	r24, 0xC5	; 197
 5ca:	8a 95       	dec	r24
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <lcd_init+0x110>
 5ce:	00 00       	nop
 5d0:	08 95       	ret

000005d2 <main>:
uint8_t temp, read_byte;



int main(void){
	DDRB = 0xFF;		//set PORTB to OUTPUTS
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00;		//set all of portb to low
 5d6:	18 ba       	out	0x18, r1	; 24
    DDRD =0x00;			//Set portD to INPUTS
 5d8:	11 ba       	out	0x11, r1	; 17
    PORTD = 0x00;		//Set all of PORTD to low
 5da:	12 ba       	out	0x12, r1	; 18
    DDRE = 0xFF;		//Set portE to OUTPUTS
 5dc:	82 b9       	out	0x02, r24	; 2
	DDRF &= ~(1 << 0);	// PORTF Pin 1 is input for data
 5de:	80 91 61 00 	lds	r24, 0x0061
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	80 93 61 00 	sts	0x0061, r24
    }
}   

/* Run this code before attempting to write to the LCD.*/
void spi_init(void){
    DDRF |= 0x08;  //port F bit 3 is enable for LCD
 5e8:	80 91 61 00 	lds	r24, 0x0061
 5ec:	88 60       	ori	r24, 0x08	; 8
 5ee:	80 93 61 00 	sts	0x0061, r24
    PORTB |= 0x00; //port B initalization for SPI
 5f2:	88 b3       	in	r24, 0x18	; 24
 5f4:	88 bb       	out	0x18, r24	; 24
    DDRB |= 0x07;  //Turn on SS, MOSI, SCLK 
 5f6:	87 b3       	in	r24, 0x17	; 23
 5f8:	87 60       	ori	r24, 0x07	; 7
 5fa:	87 bb       	out	0x17, r24	; 23
    //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first  
    SPCR = 0x50;
 5fc:	80 e5       	ldi	r24, 0x50	; 80
 5fe:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x01;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	8e b9       	out	0x0e, r24	; 14
    DDRE = 0xFF;		//Set portE to OUTPUTS
	DDRF &= ~(1 << 0);	// PORTF Pin 1 is input for data


    spi_init();
    lcd_init();
 604:	0e 94 5d 02 	call	0x4ba	; 0x4ba <lcd_init>
/**************************
*	Initializes uart1 with the given ubrr
***************************/
void USART_Init( unsigned int ubrr ) {
    /* Set baud rate */
    UBRR1H = (unsigned char)(ubrr>>8);
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	80 93 98 00 	sts	0x0098, r24
    UBRR1L = (unsigned char)ubrr;
 60e:	80 e4       	ldi	r24, 0x40	; 64
 610:	80 93 99 00 	sts	0x0099, r24
    /* Enable receiver and transmitter */ 
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 614:	88 e1       	ldi	r24, 0x18	; 24
 616:	80 93 9a 00 	sts	0x009A, r24
    /* Set frame format: 8data, 2stop bit */ 
    UCSR1C = (1<<USBS1)|(3<<UCSZ01);
 61a:	8c e0       	ldi	r24, 0x0C	; 12
 61c:	80 93 9d 00 	sts	0x009D, r24
 620:	ee e5       	ldi	r30, 0x5E	; 94
 622:	f1 e0       	ldi	r31, 0x01	; 1
	USART_Init(UBRR);
	int i;
	
	//Initialize the buffer to dashes for printing
    for (i = 0; i < 16; ++i){
        nes_data[i] = '-';
 624:	8d e2       	ldi	r24, 0x2D	; 45
 626:	81 93       	st	Z+, r24
    lcd_init();
	USART_Init(UBRR);
	int i;
	
	//Initialize the buffer to dashes for printing
    for (i = 0; i < 16; ++i){
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	ee 36       	cpi	r30, 0x6E	; 110
 62c:	f2 07       	cpc	r31, r18
 62e:	d9 f7       	brne	.-10     	; 0x626 <main+0x54>
        nes_data[i] = '-';
    }
	//Set the end of the string
	nes_data[16] = '\0';
 630:	10 92 6e 01 	sts	0x016E, r1

    clear_display();
 634:	0e 94 bc 00 	call	0x178	; 0x178 <clear_display>
    string2lcd("Starting Program");
 638:	8b e4       	ldi	r24, 0x4B	; 75
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 02 01 	call	0x204	; 0x204 <string2lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 640:	8f ef       	ldi	r24, 0xFF	; 255
 642:	99 e6       	ldi	r25, 0x69	; 105
 644:	28 e1       	ldi	r18, 0x18	; 24
 646:	81 50       	subi	r24, 0x01	; 1
 648:	90 40       	sbci	r25, 0x00	; 0
 64a:	20 40       	sbci	r18, 0x00	; 0
 64c:	e1 f7       	brne	.-8      	; 0x646 <main+0x74>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <main+0x7e>
 650:	00 00       	nop

    _delay_ms(500);
	while(1){
        
		clear_display();
        switch(USART_Receive()){
 652:	cb e0       	ldi	r28, 0x0B	; 11
 654:	d0 e0       	ldi	r29, 0x00	; 0
    string2lcd("Starting Program");

    _delay_ms(500);
	while(1){
        
		clear_display();
 656:	0e 94 bc 00 	call	0x178	; 0x178 <clear_display>
*	Wait for data to be received, then
*	return the data from UDR1
***************************/
unsigned char USART_Receive( void ) {
	/* Wait for data to be received */ //
	while ( !(UCSR1A & (1<<RXC)) ){
 65a:	80 91 9b 00 	lds	r24, 0x009B
 65e:	87 fd       	sbrc	r24, 7
 660:	08 c0       	rjmp	.+16     	; 0x672 <main+0xa0>
		clear_display();
 662:	0e 94 bc 00 	call	0x178	; 0x178 <clear_display>
		stop();
 666:	0e 94 bb 01 	call	0x376	; 0x376 <stop>
*	Wait for data to be received, then
*	return the data from UDR1
***************************/
unsigned char USART_Receive( void ) {
	/* Wait for data to be received */ //
	while ( !(UCSR1A & (1<<RXC)) ){
 66a:	80 91 9b 00 	lds	r24, 0x009B
 66e:	87 ff       	sbrs	r24, 7
 670:	f8 cf       	rjmp	.-16     	; 0x662 <main+0x90>
		clear_display();
		stop();
	}
	/* Get and return received data from buffer */ 
	
	return UDR1;
 672:	e0 91 9c 00 	lds	r30, 0x009C

    _delay_ms(500);
	while(1){
        
		clear_display();
        switch(USART_Receive()){
 676:	8e 2f       	mov	r24, r30
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	c8 17       	cp	r28, r24
 67c:	d9 07       	cpc	r29, r25
 67e:	60 f4       	brcc	.+24     	; 0x698 <main+0xc6>
				break;
			case A:
				stepUp();
				break;
			default:
                stop();
 680:	0e 94 bb 01 	call	0x376	; 0x376 <stop>
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	9d ee       	ldi	r25, 0xED	; 237
 688:	22 e0       	ldi	r18, 0x02	; 2
 68a:	81 50       	subi	r24, 0x01	; 1
 68c:	90 40       	sbci	r25, 0x00	; 0
 68e:	20 40       	sbci	r18, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <main+0xb8>
 692:	00 c0       	rjmp	.+0      	; 0x694 <main+0xc2>
 694:	00 00       	nop
 696:	df cf       	rjmp	.-66     	; 0x656 <main+0x84>

    _delay_ms(500);
	while(1){
        
		clear_display();
        switch(USART_Receive()){
 698:	fc 01       	movw	r30, r24
 69a:	ef 5a       	subi	r30, 0xAF	; 175
 69c:	fc 4f       	sbci	r31, 0xFC	; 252
 69e:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__tablejump2__>
 6a2:	75 03       	mulsu	r23, r21
 6a4:	72 03       	mulsu	r23, r18
 6a6:	40 03       	mulsu	r20, r16
 6a8:	40 03       	mulsu	r20, r16
 6aa:	6f 03       	fmul	r22, r23
 6ac:	6c 03       	fmul	r22, r20
 6ae:	69 03       	fmul	r22, r17
 6b0:	66 03       	mulsu	r22, r22
 6b2:	63 03       	mulsu	r22, r19
 6b4:	60 03       	mulsu	r22, r16
 6b6:	40 03       	mulsu	r20, r16
 6b8:	5d 03       	fmul	r21, r21
                break;
            case Left:
                left();
                break;
            case R:
                fire();
 6ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <fire>
                break;
 6be:	e2 cf       	rjmp	.-60     	; 0x684 <main+0xb2>
			case X:
				lookUp();
 6c0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lookUp>
				break;
 6c4:	df cf       	rjmp	.-66     	; 0x684 <main+0xb2>
				break;
			case Y:
				stepDown();
				break;
			case A:
				stepUp();
 6c6:	0e 94 31 01 	call	0x262	; 0x262 <stepUp>
				break;
 6ca:	dc cf       	rjmp	.-72     	; 0x684 <main+0xb2>
                break;
            case Down:
                reverse();
                break;
            case Right:
                right();
 6cc:	0e 94 af 01 	call	0x35e	; 0x35e <right>
                break;
 6d0:	d9 cf       	rjmp	.-78     	; 0x684 <main+0xb2>
            case Left:
                left();
 6d2:	0e 94 a3 01 	call	0x346	; 0x346 <left>
                break;
 6d6:	d6 cf       	rjmp	.-84     	; 0x684 <main+0xb2>
        switch(USART_Receive()){
            case Up:
                forward();
                break;
            case Down:
                reverse();
 6d8:	0e 94 97 01 	call	0x32e	; 0x32e <reverse>
                break;
 6dc:	d3 cf       	rjmp	.-90     	; 0x684 <main+0xb2>
	while(1){
        
		clear_display();
        switch(USART_Receive()){
            case Up:
                forward();
 6de:	0e 94 8b 01 	call	0x316	; 0x316 <forward>
                break;
 6e2:	d0 cf       	rjmp	.-96     	; 0x684 <main+0xb2>
				break;
			case B:
				lookDown();
				break;
			case Y:
				stepDown();
 6e4:	0e 94 4b 01 	call	0x296	; 0x296 <stepDown>
				break;
 6e8:	cd cf       	rjmp	.-102    	; 0x684 <main+0xb2>
                break;
			case X:
				lookUp();
				break;
			case B:
				lookDown();
 6ea:	0e 94 6f 01 	call	0x2de	; 0x2de <lookDown>
				break;
 6ee:	ca cf       	rjmp	.-108    	; 0x684 <main+0xb2>

000006f0 <__tablejump2__>:
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	00 24       	eor	r0, r0
 6f6:	00 1c       	adc	r0, r0
 6f8:	0b be       	out	0x3b, r0	; 59
 6fa:	07 90       	elpm	r0, Z+
 6fc:	f6 91       	elpm	r31, Z
 6fe:	e0 2d       	mov	r30, r0
 700:	09 94       	ijmp

00000702 <_exit>:
 702:	f8 94       	cli

00000704 <__stop_program>:
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>
